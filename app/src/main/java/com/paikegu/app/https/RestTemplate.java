package com.xiankezu.sirceo.https;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.Set;import org.apache.http.Header;import org.apache.http.client.params.ClientPNames;import org.apache.http.cookie.Cookie;import android.content.Context;import android.util.Log;import android.webkit.CookieManager;import android.webkit.CookieSyncManager;import android.webkit.WebView;import com.loopj.android.http.AsyncHttpClient;import com.loopj.android.http.AsyncHttpResponseHandler;import com.loopj.android.http.PersistentCookieStore;import com.loopj.android.http.RequestParams;import com.xiankezu.sirceo.globals.URL;import com.xiankezu.sirceo.tools.CookieUtils;/** * 异步网络请求模板 * @author shefenfei * @date 2014-09-07 * @version 3.0 * @notice 推荐使用这个 * @api http://loopj.com/android-async-http/doc/com/loopj/android/http/package-summary.html */public class RestTemplate {		/**URL*/	private static final String BASE_URL = URL.ROOT;		/**实例化对象*/	private static AsyncHttpClient client = new AsyncHttpClient();		/**缓存Cookie*/	private PersistentCookieStore cookieStore;		private Context context;			/**初始化相关参数*/	static{		client.setTimeout(40000);		}	public RestTemplate(Context c) {		this.context = c;		cookieStore = new PersistentCookieStore(c);		client.setCookieStore(cookieStore);		client.getHttpClient().getParams().setParameter(ClientPNames.ALLOW_CIRCULAR_REDIRECTS, true);	}		/**	 * 清除缓存	 * @author shaowei.ma	 * @date 2014年11月13日	 */	public void clearCookies(){		cookieStore.clear();	}		/**	 * get请求	 * @param url 服务器地址	 * @param params 请求参数	 * @param responseHandler 响应处理器	 */	public void get(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {		client.get(getAbsoluteUrl(url), params, responseHandler);	}	/**	 * get请求	 * @param url 服务器地址	 * @param map 请求参数	 * @param responseHandler 响应处理器	 */	public void get(String url, Map<String, String> map, AsyncHttpResponseHandler responseHandler){		RequestParams params = new RequestParams(map);		get(url, params, responseHandler);	}		/**	 * post请求	 * @param url 服务器地址	 * @param params 请求参数	 * @param responseHandler 响应处理器	 */	public void post(String url, RequestParams params,AsyncHttpResponseHandler responseHandler) {//		params.put("csrfmiddlewaretoken", CookieUtils.fetchCookie(context));					client.post(getAbsoluteUrl(url), params, responseHandler);	}		/**	 * post请求	 * @param url 服务器地址	 * @param map 请求参数	 * @param responseHandler 响应处理器	 */	public void post(String url, Map<String, String> map,AsyncHttpResponseHandler responseHandler) {		RequestParams params = new RequestParams(map);		post(url, params, responseHandler);	}	/**	 * 只在第一次请求时候调用,其它的POST请求不要调用这个方法,只为获取token	 * @param url	 * @param responseHandler	 */	public void post_crftoken(String url,AsyncHttpResponseHandler responseHandler){		client.post(getAbsoluteUrl(url), responseHandler);	}		/**	 * 获取绝对路径	 * @param relativeUrl	 * @return	 */	private static String getAbsoluteUrl(String relativeUrl) {		if(relativeUrl.startsWith("http://"))			return relativeUrl;		return BASE_URL + relativeUrl;	}			/**	 * 取消当前的网络请求	 * @param c	 */	public void cancelRequest(Context c){		client.cancelRequests(c, true);	}}
